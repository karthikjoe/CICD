trigger:
- main  # or your deployment branch

pool:
  name: 'CICDTest'  # Replace with your agent pool name

variables:
  solution: '**/*.sln'
  buildPlatform: 'Release'
  buildConfiguration: 'Release'
  publishFolder: '$(Build.ArtifactStagingDirectory)\website-publish'
  iisFolder: 'D:\website-master'
  appPoolName: 'website'
  backupRoot: 'D:\website-backup'

stages:
- stage: Build
  displayName: 'Build and Publish'
  jobs:
  - job: BuildJob
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
    
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:PublishProfile=FolderProfile /p:Configuration=$(buildConfiguration)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish app'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(publishFolder)'

- stage: Deploy
  displayName: 'Deploy to IIS'
  dependsOn: Build
  jobs:
  - job: DeployJob
    steps:
    - task: PowerShell@2
      displayName: 'Deploy with backup, rollback, cleanup'
      inputs:
        targetType: 'inline'
        script: |
          $dateFolder = (Get-Date -Format 'yyyyMMdd')
          $timeFolder = (Get-Date -Format 'HHmmss')
          $backupPath = Join-Path "$(backupRoot)\$dateFolder" $timeFolder
          $iisFolder = "$(iisFolder)"
          $publishFolder = "$(publishFolder)"
          $appPoolName = "$(appPoolName)"

          if (-not (Test-Path $backupPath)) {
              New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
          }

          try {
              Write-Host "Stopping app pool: $appPoolName"
              Stop-WebAppPool -Name $appPoolName

              if (Test-Path $iisFolder) {
                  Write-Host "Backing up current site to: $backupPath"
                  Copy-Item $iisFolder $backupPath -Recurse -Force
              }

              Write-Host "Clearing IIS folder: $iisFolder"
              Remove-Item -Path "$iisFolder\*" -Recurse -Force -ErrorAction SilentlyContinue

              Write-Host "Copying new publish files..."
              Copy-Item "$publishFolder\*" $iisFolder -Recurse -Force

              Write-Host "Starting app pool: $appPoolName"
              Start-WebAppPool -Name $appPoolName

              Write-Host "Cleaning up publish folder..."
              Remove-Item -Path "$publishFolder" -Recurse -Force -ErrorAction SilentlyContinue

              Write-Host "Cleaning old backups (older than 7 days)..."
              Get-ChildItem "$(backupRoot)" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          }
          catch {
              Write-Error "Deployment failed: $_"
              if (Test-Path $backupPath) {
                  Write-Host "Rolling back from: $backupPath"
                  Remove-Item -Path "$iisFolder\*" -Recurse -Force -ErrorAction SilentlyContinue
                  Copy-Item "$backupPath\*" $iisFolder -Recurse -Force
                  Start-WebAppPool -Name $appPoolName
                  Write-Host "Rollback completed."
              } else {
                  Write-Warning "No backup found for rollback."
              }
              throw
          }
